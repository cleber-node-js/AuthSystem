import { Request, Response } from 'express';
import { UserRoleService } from '../services/UserRoleService';

const userRoleService = new UserRoleService();

export class UserRoleController {
    // Criar uma nova associa√ß√£o UserRole
    async createUserRole(req: Request, res: Response) {
        console.log(`üì© Requisi√ß√£o recebida: POST /user-roles`, req.body);
        const { userId, roleId } = req.body;

        try {
            const userRole = await userRoleService.createUserRole(userId, roleId);
            console.log(`‚úÖ Associa√ß√£o criada:`, userRole);
            return res.status(201).json(userRole);
        } catch (error) {
            console.error("‚ùå Erro ao criar associa√ß√£o UserRole:", error);
            return res.status(500).json({ error: "Falha ao criar associa√ß√£o UserRole" });
        }
    }

    // Buscar todas as associa√ß√µes UserRole
    async getAllUserRoles(req: Request, res: Response) {
        console.log(`üì© Requisi√ß√£o recebida: GET /user-roles`);
        try {
            const userRoles = await userRoleService.getAllUserRoles();
            console.log(`üìã Lista de associa√ß√µes:`, userRoles);
            return res.status(200).json(userRoles);
        } catch (error) {
            console.error("‚ùå Erro ao buscar associa√ß√µes UserRole:", error);
            return res.status(500).json({ error: "Falha ao buscar associa√ß√µes UserRole" });
        }
    }

    // Buscar uma associa√ß√£o UserRole por ID
    async getUserRoleById(req: Request, res: Response) {
        const id = parseInt(req.params.id, 10);
        console.log(`üì© Requisi√ß√£o recebida: GET /user-roles/${id}`);

        try {
            const userRole = await userRoleService.getUserRoleById(id);
            if (!userRole) {
                console.log(`‚ö†Ô∏è Associa√ß√£o UserRole n√£o encontrada para ID ${id}`);
                return res.status(404).json({ error: "Associa√ß√£o UserRole n√£o encontrada" });
            }
            console.log(`üîç Associa√ß√£o encontrada:`, userRole);
            return res.status(200).json(userRole);
        } catch (error) {
            console.error("‚ùå Erro ao buscar associa√ß√£o UserRole por ID:", error);
            return res.status(500).json({ error: "Falha ao buscar associa√ß√£o UserRole" });
        }
    }

    // Atualizar uma associa√ß√£o UserRole
    async updateUserRole(req: Request, res: Response) {
        const id = parseInt(req.params.id, 10);
        console.log(`üì© Requisi√ß√£o recebida: PUT /user-roles/${id}`, req.body);
        const { userId, roleId } = req.body;

        try {
            const updatedUserRole = await userRoleService.updateUserRole(id, userId, roleId);
            console.log(`üîÑ Associa√ß√£o atualizada:`, updatedUserRole);
            return res.status(200).json(updatedUserRole);
        } catch (error) {
            console.error("‚ùå Erro ao atualizar associa√ß√£o UserRole:", error);
            return res.status(500).json({ error: "Falha ao atualizar associa√ß√£o UserRole" });
        }
    }

    // Deletar uma associa√ß√£o UserRole
    async deleteUserRole(req: Request, res: Response) {
        const id = parseInt(req.params.id, 10);
        console.log(`üì© Requisi√ß√£o recebida: DELETE /user-roles/${id}`);

        try {
            await userRoleService.deleteUserRole(id);
            console.log(`üóëÔ∏è Associa√ß√£o UserRole deletada: ID ${id}`);
            return res.status(200).json({ message: "Associa√ß√£o UserRole deletada com sucesso" });
        } catch (error) {
            console.error("‚ùå Erro ao deletar associa√ß√£o UserRole:", error);
            return res.status(500).json({ error: "Falha ao deletar associa√ß√£o UserRole" });
        }
    }
}
