import { Request, Response } from 'express';
import { SessionService } from '../services/SessionService';

export class SessionController {
    private sessionService: SessionService;

    constructor() {
        this.sessionService = new SessionService();
    }

    // Criar uma nova sess√£o
    public async createSession(req: Request, res: Response) {
        try {
            const { user_id } = req.body;
            const newSession = await this.sessionService.createSession(user_id);

            console.log(`‚úÖ Sess√£o criada com sucesso:`, newSession);

            return res.status(201).json(newSession);
        } catch (error) {
            console.error('‚ùå Erro ao criar sess√£o:', error);
            return res.status(500).json({ error: 'Erro ao criar sess√£o' });
        }
    }

    // Obter todas as sess√µes
    public async getAllSessions(req: Request, res: Response) {
        try {
            const sessions = await this.sessionService.getAllSessions();
            console.log(`üìã Lista de sess√µes:`, sessions);
            return res.status(200).json(sessions);
        } catch (error) {
            console.error('‚ùå Erro ao buscar sess√µes:', error);
            return res.status(500).json({ error: 'Erro ao buscar sess√µes' });
        }
    }

    // Obter uma sess√£o por ID
    public async getSessionById(req: Request, res: Response) {
        try {
            const sessionId = parseInt(req.params.id);
            const session = await this.sessionService.getSessionById(sessionId);

            if (!session) {
                console.log(`‚ö†Ô∏è Sess√£o ID ${sessionId} n√£o encontrada.`);
                return res.status(404).json({ error: 'Sess√£o n√£o encontrada' });
            }

            console.log(`üîç Sess√£o encontrada:`, session);
            return res.status(200).json(session);
        } catch (error) {
            console.error('‚ùå Erro ao buscar sess√£o:', error);
            return res.status(500).json({ error: 'Erro ao buscar sess√£o' });
        }
    }

    // Atualizar uma sess√£o
    public async updateSession(req: Request, res: Response) {
        try {
            const sessionId = parseInt(req.params.id);
            const updatedSession = await this.sessionService.updateSession(sessionId, req.body);

            if (!updatedSession) {
                console.log(`‚ö†Ô∏è Sess√£o ID ${sessionId} n√£o encontrada para atualiza√ß√£o.`);
                return res.status(404).json({ error: 'Sess√£o n√£o encontrada' });
            }

            console.log(`üîÑ Sess√£o atualizada com sucesso:`, updatedSession);
            return res.status(200).json(updatedSession);
        } catch (error) {
            console.error('‚ùå Erro ao atualizar sess√£o:', error);
            return res.status(500).json({ error: 'Erro ao atualizar sess√£o' });
        }
    }

    // Deletar uma sess√£o
    public async deleteSession(req: Request, res: Response) {
        try {
            const sessionId = parseInt(req.params.id);
            const deletedSession = await this.sessionService.deleteSession(sessionId);

            if (!deletedSession) {
                console.log(`‚ö†Ô∏è Sess√£o ID ${sessionId} n√£o encontrada para dele√ß√£o.`);
                return res.status(404).json({ error: 'Sess√£o n√£o encontrada' });
            }

            console.log(`üóëÔ∏è Sess√£o deletada com sucesso:`, deletedSession);
            return res.status(200).json({ message: 'Sess√£o deletada com sucesso' });
        } catch (error) {
            console.error('‚ùå Erro ao deletar sess√£o:', error);
            return res.status(500).json({ error: 'Erro ao deletar sess√£o' });
        }
    }
}
