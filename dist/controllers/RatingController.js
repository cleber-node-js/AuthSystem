"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RatingController = void 0;
const RatingService_1 = require("../services/RatingService");
const ratingService = new RatingService_1.RatingService();
class RatingController {
    async createRating(req, res) {
        const { eventId, userId, score, comment } = req.body;
        console.log(`üìå Recebendo requisi√ß√£o para criar avalia√ß√£o:`, { eventId, userId, score, comment });
        try {
            const newRating = await ratingService.createRating(eventId, userId, score, comment);
            console.log(`‚úÖ Avalia√ß√£o criada com sucesso! ID: ${newRating.id}`);
            return res.status(201).json(newRating);
        }
        catch (error) {
            console.error(`‚ùå Erro ao criar avalia√ß√£o: ${error.message}`);
            return res.status(400).json({ error: 'Erro ao criar avalia√ß√£o. Verifique os dados enviados.' });
        }
    }
    async getAllRatings(req, res) {
        console.log('üìå Buscando todas as avalia√ß√µes...');
        try {
            const ratings = await ratingService.getAllRatings();
            console.table(ratings); // Exibe os resultados em formato de tabela no terminal
            return res.status(200).json(ratings);
        }
        catch (error) {
            console.error(`‚ùå Erro ao buscar avalia√ß√µes: ${error.message}`);
            return res.status(400).json({ error: 'Erro ao buscar avalia√ß√µes.' });
        }
    }
    async getRatingById(req, res) {
        const id = Number(req.params.id);
        console.log(`üìå Buscando avalia√ß√£o com ID: ${id}`);
        try {
            const rating = await ratingService.getRatingById(id);
            if (!rating) {
                console.warn(`‚ö†Ô∏è Avalia√ß√£o com ID ${id} n√£o encontrada.`);
                return res.status(404).json({ error: 'Avalia√ß√£o n√£o encontrada' });
            }
            console.log(`‚úÖ Avalia√ß√£o encontrada:`, rating);
            return res.status(200).json(rating);
        }
        catch (error) {
            console.error(`‚ùå Erro ao buscar avalia√ß√£o com ID ${id}: ${error.message}`);
            return res.status(400).json({ error: 'Erro ao buscar avalia√ß√£o.' });
        }
    }
    async updateRating(req, res) {
        const id = Number(req.params.id);
        const { eventId, userId, score, comment } = req.body;
        console.log(`üìå Atualizando avalia√ß√£o com ID ${id}`, { eventId, userId, score, comment });
        try {
            const updatedRating = await ratingService.updateRating(id, eventId, userId, score, comment);
            console.log(`‚úÖ Avalia√ß√£o ID ${id} atualizada com sucesso.`);
            return res.status(200).json(updatedRating);
        }
        catch (error) {
            console.error(`‚ùå Erro ao atualizar avalia√ß√£o com ID ${id}: ${error.message}`);
            return res.status(400).json({ error: 'Erro ao atualizar avalia√ß√£o.' });
        }
    }
    async deleteRating(req, res) {
        const id = Number(req.params.id);
        console.log(`üìå Deletando avalia√ß√£o com ID: ${id}`);
        try {
            const deletedRating = await ratingService.deleteRating(id);
            console.log(`‚úÖ Avalia√ß√£o ID ${id} deletada com sucesso.`);
            return res.status(200).json(deletedRating);
        }
        catch (error) {
            console.error(`‚ùå Erro ao deletar avalia√ß√£o com ID ${id}: ${error.message}`);
            return res.status(400).json({ error: 'Erro ao deletar avalia√ß√£o.' });
        }
    }
}
exports.RatingController = RatingController;
//# sourceMappingURL=RatingController.js.map