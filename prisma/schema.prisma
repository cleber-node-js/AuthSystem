generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserProfileType {
  ADMIN
  CLIENT
  GUEST
  USER
  ARTIST
  BUSINESS
  DEFAULT
}

enum UserRoleEnum {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  BLOCKED
  INACTIVE
  BANNED
}

enum NotificationCategory {
  EVENT_REMINDER
  NEW_PROMOTION
  AD_STATUS_UPDATE
  CONTRACT_STATUS_UPDATE
}

enum TransactionStatus {
  PENDING
  APPROVED
  DECLINED
  REFUNDED
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELED
  PAST_DUE
}

model User {
  id                      Int                     @id @default(autoincrement())
  name                    String                  @db.VarChar(100)
  email                   String                  @unique @db.VarChar(100)
  phone                   String?                 @unique @db.VarChar(15)
  password                String                  @db.VarChar(255)
  profileType             UserProfileType         @default(CLIENT)
  status                  UserStatus              @default(ACTIVE)
  verificationTokens      UserVerificationToken[] @relation("UserVerificationTokenToUser")
  preferences             UserPreference[]
  favorites               Favorite[]
  classifications         Classification[]
  sessions                Session[]
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @default(now())
  deletedAt               DateTime?
  roles                   UserRole[]              // Relationship with UserRole
  ratings                 Rating[]                // Consider renaming if relevant
  establishments          Establishment[]

  UserVerificationToken UserVerificationToken[]

  Notification Notification[]

  Transaction Transaction[]

  Subscription Subscription[]
}

model Session {
  id           Int    @id @default(autoincrement())
  userId       Int
  sessionToken String @unique @db.VarChar(255)
  user         User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Classification {
  id        Int    @id @default(autoincrement())
  userId    Int
  eventId   Int
  score     Int
  comment   String? @db.VarChar(500)
  user      User   @relation(fields: [userId], references: [id])
  event     Event  @relation(fields: [eventId], references: [id])

  createdAt DateTime @default(now())
}

model UserPreference {
  id                 Int    @id @default(autoincrement())
  userId             Int
  interests          String @db.VarChar(500)
  favoriteCategories String @db.VarChar(500)
  user               User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

model Favorite {
  id        Int    @id @default(autoincrement())
  userId    Int
  eventId   Int
  createdAt DateTime @default(now())

  @@unique([userId, eventId]) // Define a chave Ãºnica composta
  Event Event[]
  User User[]
}

model Rating {
  id        Int    @id @default(autoincrement())
  eventId   Int
  userId    Int
  score     Int
  comment   String? @db.VarChar(500)
  event     Event  @relation(fields: [eventId], references: [id])
  user      User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

model UserVerificationToken {
  id         Int    @id @default(autoincrement())
  userId     Int    @unique
  token      String @unique @db.VarChar(255)
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  user       User @relation(fields: [userId], references: [id])

  User User[] @relation("UserVerificationTokenToUser")
}

model Role {
  id    Int      @id @default(autoincrement())
  name  String   @unique
  users UserRole[]

  @@map("roles")
}

model UserRole {
  userId Int
  roleId Int
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
  @@map("user_roles")
}

model Artist {
  id              Int      @id @default(autoincrement())
  name            String
  genre           String
  bio             String?
  establishmentId Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  establishment   Establishment @relation(fields: [establishmentId], references: [id])

  @@map("artists")
  events Event[] @relation("ArtistEvents")
  Notification Notification[]
  Transaction Transaction[]
  Subscription Subscription[]
}

model Event {
  id            Int    @id @default(autoincrement())
  name          String @db.VarChar(100)
  description   String? @db.VarChar(500)
  startDate     DateTime
  endDate       DateTime
  establishmentId Int
  establishment Establishment @relation(fields: [establishmentId], references: [id])
  favorites     Favorite[]
  classifications Classification[]
  ratings       Rating[]
  artists       Artist[] @relation("ArtistEvents")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Establishment {
  id            Int      @id @default(autoincrement())
  name          String
  address       String?
  contact       String?
  primaryOwnerId Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  artists      Artist[]
  primaryOwner User     @relation(fields: [primaryOwnerId], references: [id])

  @@map("establishments")
  events Event[]
  Notification Notification[]
  Transaction Transaction[]
  Subscription Subscription[]
}

model Notification {
  id           Int                  @id @default(autoincrement())
  userId       Int?                 // User that receives the notification.  Can be null if not user-specific.
  artistId     Int?                 // Artist that receives the notification.  Can be null if not artist-specific.
  establishmentId Int?            // Establishment that receives the notification.  Can be null if not establishment-specific.
  category     NotificationCategory // Enum for notification type
  title        String               @db.VarChar(255) // Title of the notification
  content      String               @db.Text           // Content of the notification.
  read         Boolean              @default(false)   // Has the user read the notification?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  // Relations (Optional - based on your specific logic)
  user           User?            @relation(fields: [userId], references: [id])
  artist         Artist?          @relation(fields: [artistId], references: [id])
  establishment  Establishment?   @relation(fields: [establishmentId], references: [id])
}

model Transaction {
  id               Int      @id @default(autoincrement())
  userId           Int?
  artistId         Int?
  establishmentId  Int?
  subscriptionId   Int?
  amount           Float
  currency         String
  paymentMethod    String
  transactionId    String   @unique
  status           String   // 'pending', 'approved', 'declined', 'refunded'
  receiptUrl       String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user            User?          @relation(fields: [userId], references: [id])
  artist          Artist?        @relation(fields: [artistId], references: [id])
  establishment   Establishment? @relation(fields: [establishmentId], references: [id])
  subscription    Subscription?  @relation(fields: [subscriptionId], references: [id])
}


model Subscription {
  id               Int       @id @default(autoincrement())
  userId           Int
  artistId         Int?
  establishmentId  Int?
  planId           Int
  plan             String
  startDate        DateTime
  endDate          DateTime
  status           String    // 'active', 'inactive', 'canceled', 'past_due'
  nextPaymentDate  DateTime?
  amount           Float
  currency         String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user            User           @relation(fields: [userId], references: [id])
  artist          Artist?        @relation(fields: [artistId], references: [id])
  establishment   Establishment? @relation(fields: [establishmentId], references: [id])
  transactions    Transaction[]
}

