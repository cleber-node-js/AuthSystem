generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserProfileType {
  ADMIN
  CLIENT
  GUEST
  USER
  ARTIST
  BUSINESS
}

enum UserRoleEnum {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  BLOCKED
  INACTIVE
  BANNED
}

model User {
  id                      Int                     @id @default(autoincrement())
  name                    String                  @db.VarChar(100)
  email                   String                  @unique @db.VarChar(100)
  phone                   String?                 @unique @db.VarChar(15)
  password                String                  @db.VarChar(255)
  profileType             UserProfileType         @default(CLIENT)
  status                  UserStatus              @default(ACTIVE)
  verificationTokens      UserVerificationToken[] @relation("UserVerificationTokenToUser")
  preferences             UserPreference[]
  favorites               Favorite[]
  classifications         Classification[]
  sessions                Session[]
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @default(now())
  deletedAt               DateTime?
  roles                   UserRole[]              // Relationship with UserRole
  ratings                 Rating[]                // Consider renaming if relevant
  establishments          Establishment[]

  UserVerificationToken UserVerificationToken[]
}

model Session {
  id           Int    @id @default(autoincrement())
  userId       Int
  sessionToken String @unique @db.VarChar(255)
  user         User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Classification {
  id        Int    @id @default(autoincrement())
  userId    Int
  eventId   Int
  score     Int
  comment   String? @db.VarChar(500)
  user      User   @relation(fields: [userId], references: [id])
  event     Event  @relation(fields: [eventId], references: [id])

  createdAt DateTime @default(now())
}

model UserPreference {
  id                 Int    @id @default(autoincrement())
  userId             Int
  interests          String @db.VarChar(500)
  favoriteCategories String @db.VarChar(500)
  user               User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

model Favorite {
  id        Int    @id @default(autoincrement())
  userId    Int
  eventId   Int
  createdAt DateTime @default(now())

  @@unique([userId, eventId]) // Define a chave Ãºnica composta
  Event Event[]
  User User[]
}

model Rating {
  id        Int    @id @default(autoincrement())
  eventId   Int
  userId    Int
  score     Int
  comment   String? @db.VarChar(500)
  event     Event  @relation(fields: [eventId], references: [id])
  user      User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

model UserVerificationToken {
  id         Int    @id @default(autoincrement())
  userId     Int    @unique
  token      String @unique @db.VarChar(255)
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  user       User @relation(fields: [userId], references: [id])

  User User[] @relation("UserVerificationTokenToUser")
}

model Role {
  id    Int      @id @default(autoincrement())
  name  String   @unique
  users UserRole[]

  @@map("roles")
}

model UserRole {
  userId Int
  roleId Int
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
  @@map("user_roles")
}

model Artist {
  id              Int      @id @default(autoincrement())
  name            String
  genre           String
  bio             String?
  establishmentId Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  establishment   Establishment @relation(fields: [establishmentId], references: [id])

  @@map("artists")
  events Event[] @relation("ArtistEvents")
}

model Event {
  id            Int    @id @default(autoincrement())
  name          String @db.VarChar(100)
  description   String? @db.VarChar(500)
  startDate     DateTime
  endDate       DateTime
  establishmentId Int
  establishment Establishment @relation(fields: [establishmentId], references: [id])
  favorites     Favorite[]
  classifications Classification[]
  ratings       Rating[]
  artists       Artist[] @relation("ArtistEvents")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Establishment {
  id            Int      @id @default(autoincrement())
  name          String
  address       String?
  contact       String?
  primaryOwnerId Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  artists      Artist[]
  primaryOwner User     @relation(fields: [primaryOwnerId], references: [id])

  @@map("establishments")
  events Event[]
}
