generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  PENDING
  BLOCKED
  INACTIVE
  BANNED
}

enum ArtistStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
}

enum NotificationCategory {
  EVENT_REMINDER
  NEW_PROMOTION
  AD_STATUS_UPDATE
  CONTRACT_STATUS_UPDATE
}

enum TransactionStatus {
  PENDING
  APPROVED
  DECLINED
  REFUNDED
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELED
  PAST_DUE
}

model Category {
  id                      Int                     @id @default(autoincrement())
  name                    String                  @unique
  imageUrl                String
  eventCategories         EventCategory[] // Opposite relation field
  establishmentCategories EstablishmentCategory[] // Opposite relation field for EstablishmentCategory
}

model EstablishmentCategory {
  id               Int      @id @default(autoincrement())
  establishment_id Int
  category_id      Int
  category         Category @relation(fields: [category_id], references: [id])

  establishment Establishment @relation(fields: [establishment_id], references: [id])

  @@unique([establishment_id, category_id])
}

model EventCategory {
  id          Int      @id @default(autoincrement())
  event_id    Int
  category_id Int
  category    Category @relation(fields: [category_id], references: [id])

  event Event @relation(fields: [event_id], references: [id])

  @@unique([event_id, category_id])
}

model User {
  id              Int              @id @default(autoincrement())
  name            String           @db.VarChar(100)
  email           String           @unique @db.VarChar(100)
  phone           String?          @unique @db.VarChar(15)
  password        String           @db.VarChar(255)
  profileType     Int
  status          UserStatus       @default(ACTIVE)
  preferences     UserPreference[]
  favorites       Favorite[]
  classifications Classification[]
  sessions        Session[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
  deletedAt       DateTime?
  roles           UserRole[] // Relacionamento com UserRole
  ratings         Rating[] // Considerando renomear se necessário
  establishments  Establishment[]

  UserVerificationToken UserVerificationToken[]

  Notification Notification[]

  Transaction Transaction[]

  Subscription Subscription[]
}

model Session {
  id           Int    @id @default(autoincrement())
  user_id      Int
  sessionToken String @unique @db.VarChar(255)
  user         User   @relation(fields: [user_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Classification {
  id       Int     @id @default(autoincrement())
  user_id  Int
  event_id Int
  score    Int
  comment  String? @db.VarChar(500)
  user     User    @relation(fields: [user_id], references: [id])
  event    Event   @relation(fields: [event_id], references: [id])

  createdAt DateTime @default(now())
}

model UserPreference {
  id                 Int    @id @default(autoincrement())
  user_id            Int
  interests          String @db.VarChar(500)
  favoriteCategories String @db.VarChar(500)
  user               User   @relation(fields: [user_id], references: [id])

  createdAt DateTime @default(now())
}

model Favorite {
  id        Int      @id @default(autoincrement())
  user_id   Int
  event_id  Int
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [event_id], references: [id])
  User      User     @relation(fields: [user_id], references: [id])

  @@unique([user_id, event_id])
}

model Rating {
  id       Int     @id @default(autoincrement())
  event_id Int
  user_id  Int
  score    Int
  comment  String? @db.VarChar(500)
  event    Event   @relation(fields: [event_id], references: [id])
  user     User    @relation(fields: [user_id], references: [id])

  createdAt DateTime @default(now())
}

model UserVerificationToken {
  id        Int      @id @default(autoincrement())
  user_id   Int      @unique
  token     String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [user_id], references: [id])
}

model Role {
  id    Int        @id @default(autoincrement())
  name  String     @unique
  users UserRole[]

  @@map("roles")
}

model UserRole {
  id      Int @id @default(autoincrement())
  user_id Int
  role_id Int

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([user_id, role_id]) // Evita papéis duplicados para o mesmo usuário
  @@map("user_roles")
}

model Artist {
  id              Int                    @id @default(autoincrement())
  name            String
  genre           String?
  bio             String?
  status          ArtistStatus           @default(PENDING)
  imageUrl        String?
  approvalMessage String?
  establishments  EstablishmentArtists[]
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt

  events        Event[]        @relation("ArtistEvents")
  notifications Notification[]
  transactions  Transaction[]
  subscriptions Subscription[]
}

model Event {
  id               Int              @id @default(autoincrement())
  name             String           @db.VarChar(100)
  description      String?          @db.VarChar(500)
  imageUrl         String?
  startDate        DateTime
  endDate          DateTime?
  latitude         Float?
  longitude        Float?
  establishment_id Int
  establishment    Establishment    @relation(fields: [establishment_id], references: [id])
  favorites        Favorite[]
  classifications  Classification[]
  ratings          Rating[]
  artists          Artist[]         @relation("ArtistEvents")
  categories       EventCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Establishment {
  id             Int      @id @default(autoincrement())
  name           String
  address        String?
  contact        String?
  imageUrl       String?
  latitude       Float?
  longitude      Float?
  primaryOwner_id Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  artists       EstablishmentArtists[]
  primaryOwner  User                    @relation(fields: [primaryOwner_id], references: [id])
  events        Event[]
  notifications Notification[]
  transactions  Transaction[]
  subscriptions Subscription[]
  categories    EstablishmentCategory[]

  @@map("establishments")
}

model EstablishmentArtists {
  artist_id        Int
  establishment_id Int
  status           ArtistStatus @default(PENDING)
  approvalMessage  String?

  artist        Artist        @relation(fields: [artist_id], references: [id])
  establishment Establishment @relation(fields: [establishment_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([artist_id, establishment_id])
  @@map("establishment_artists") // Nome real da tabela no banco (opcional)
}

model Notification {
  id               Int                  @id @default(autoincrement())
  user_id          Int? // User that receives the notification.  Can be null if not user-specific.
  artist_id        Int? // Artist that receives the notification.  Can be null if not artist-specific.
  establishment_id Int? // Establishment that receives the notification.  Can be null if not establishment-specific.
  category         NotificationCategory // Enum for notification type
  title            String               @db.VarChar(255) // Title of the notification
  content          String               @db.Text // Content of the notification.
  read             Boolean              @default(false) // Has the user read the notification?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt

  // Relations (Optional - based on your specific logic)
  user          User?          @relation(fields: [user_id], references: [id])
  artist        Artist?        @relation(fields: [artist_id], references: [id])
  establishment Establishment? @relation(fields: [establishment_id], references: [id])
}

model Transaction {
  id               Int               @id @default(autoincrement())
  user_id          Int?
  artist_id        Int?
  establishment_id Int?
  subscription_id  Int?
  amount           Float
  currency         String
  paymentMethod    String
  transaction_id   String            @unique
  status           TransactionStatus
  receiptUrl       String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  user          User?          @relation(fields: [user_id], references: [id])
  artist        Artist?        @relation(fields: [artist_id], references: [id])
  establishment Establishment? @relation(fields: [establishment_id], references: [id])
  subscription  Subscription?  @relation(fields: [subscription_id], references: [id])
}

model Subscription {
  id               Int                @id @default(autoincrement())
  user_id          Int
  artist_id        Int?
  establishment_id Int?
  planId           Int
  plan             String
  startDate        DateTime
  endDate          DateTime
  status           SubscriptionStatus
  nextPaymentDate  DateTime?
  amount           Float
  currency         String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  user          User           @relation(fields: [user_id], references: [id])
  artist        Artist?        @relation(fields: [artist_id], references: [id])
  establishment Establishment? @relation(fields: [establishment_id], references: [id])
  transactions  Transaction[]
}
